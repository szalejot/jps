package edu.pjwstk.mherman.jps.parser;
 
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.DefaultSymbolFactory;
import java_cup.runtime.Symbol;
import edu.pjwstk.mherman.jps.ast.auxname.*;
import edu.pjwstk.mherman.jps.ast.binary.*;
import edu.pjwstk.mherman.jps.ast.terminal.*;
import edu.pjwstk.mherman.jps.ast.unary.*;
import edu.pjwstk.jps.ast.*;

parser code {: 
	public Lexer lexer;
	private String expr;
	public IExpression RESULT;
	
	public SBAParser(String expr) {
		this.symbolFactory = new DefaultSymbolFactory();   
		this.expr = expr;
	}
	
	void setResult(IExpression exp) {
		this.RESULT = exp;
	}  

:};

init with {: 	    lexer = new Lexer(new StringReader(expr)); :};
scan with {:		return lexer.next_token(); :};


terminal Integer INTEGER_LITERAL;
terminal Double DOUBLE_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER_LITERAL;

terminal String PLUS;
terminal String MINUS;
terminal String MULTIPLY; 
terminal String DIVIDE;
terminal String MODULO;
terminal String AS;
terminal String GROUPAS;
terminal String COMMA;
terminal String BAG;
terminal String EQUALS;
terminal String NOT_EQUALS;
terminal String MORE;
terminal String LESS;
terminal String MORE_OR_EQUAL;
terminal String LESS_OR_EQUAL;
terminal String ALL;
terminal String ANY;
terminal String WHERE;
terminal String JOIN;
terminal String NOT;
terminal String AND;
terminal String OR;
terminal String XOR;
terminal String DOT;
terminal String MIN;
terminal String MAX;
terminal String SUM;
terminal String AVG;
terminal String MINUS_FUNCTION;
terminal String INTERSECT;
terminal String UNIQUE;
terminal String IN;

terminal String LEFT_ROUND_BRACKET;
terminal String RIGHT_ROUND_BRACKET;

non terminal IExpression goal;
non terminal IExpression expr;


//priority
precedence left WHERE, JOIN;
precedence left ALL, ANY;
precedence left NOT;
precedence left AND, OR, XOR;
precedence left EQUALS, NOT_EQUALS, MORE, LESS, MORE_OR_EQUAL, LESS_OR_EQUAL;
precedence left COMMA;
precedence left PLUS, MINUS; 
precedence left MULTIPLY, DIVIDE, MODULO;
precedence left AS, GROUPAS;
precedence left MIN, MAX, SUM, AVG, MINUS_FUNCTION, INTERSECT, UNIQUE, IN;
precedence left DOT;
precedence left BAG;
precedence left LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET;

start with goal;

goal ::= expr:e		{: RESULT = e; parser.setResult(e); :} ;

expr  ::=
	  	STRING_LITERAL:o {: RESULT = new StringTerminal((String)o); :}
	|	expr:e1 PLUS:o expr:e2	{: RESULT = new PlusExpression(e1, e2); :}
	| 	expr:e1 MINUS:o expr:e2	{: RESULT = new MinusExpression(e1, e2); :}
	| 	expr:e1 AS:o expr:e2	{: RESULT = new AsExpression(e1, ((NameTerminal) e2).getName()); :}
	| 	expr:e1 GROUPAS:o expr:e2	{: RESULT = new GroupAsExpression(e1, ((NameTerminal) e2).getName()); :}
	| 	expr:e1 MULTIPLY:o 	 expr:e2	{: RESULT = new MultiplyExpression(e1, e2); :}
	| 	expr:e1 DIVIDE:o	 expr:e2	{: RESULT = new DivideExpression(e1, e2); :}
	| 	expr:e1 MODULO:o	 expr:e2	{: RESULT = new ModuloExpression(e1, e2); :}
	| 	expr:e1 COMMA:o	 expr:e2	{: RESULT = new CommaExpression(e1, e2); :}
	| 	NOT:o expr:e1	{: RESULT = new NotExpression(e1); :}
	| 	expr:e1 EQUALS:o expr:e2	{: RESULT = new EqualsExpression(e1, e2); :}
	| 	expr:e1 NOT_EQUALS:o expr:e2	{: RESULT = new NotEqualsExpression(e1, e2); :}
	| 	expr:e1 MORE:o expr:e2	{: RESULT = new GreaterThanExpression(e1, e2); :}
	| 	expr:e1 LESS:o expr:e2	{: RESULT = new LessThanExpression(e1, e2); :}
	| 	expr:e1 MORE_OR_EQUAL:o expr:e2	{: RESULT = new GreaterOrEqualThanExpression(e1, e2); :}
	| 	expr:e1 LESS_OR_EQUAL:o expr:e2	{: RESULT = new LessOrEqualThanExpression(e1, e2); :}
	| 	ANY:o expr:e1 expr:e2	{: RESULT = new ForAnyExpression(e1, e2); :}
	| 	ALL:o expr:e1 expr:e2	{: RESULT = new ForAllExpression(e1, e2); :}
	| 	expr:e1 AND:o expr:e2	{: RESULT = new AndExpression(e1, e2); :}
	| 	expr:e1 OR:o expr:e2	{: RESULT = new OrExpression(e1, e2); :}
	| 	expr:e1 XOR:o expr:e2	{: RESULT = new XORExpression(e1, e2); :}
	| 	expr:e1 WHERE:o expr:e2	{: RESULT = new WhereExpression(e1, e2); :}
	| 	expr:e1 JOIN:o expr:e2	{: RESULT = new JoinExpression(e1, e2); :}
	| 	expr:e1 MINUS_FUNCTION:o expr:e2	{: RESULT = new MinusSetExpression(e1, e2); :}
	| 	expr:e1 INTERSECT:o expr:e2	{: RESULT = new IntersectExpression(e1, e2); :}
	| 	expr:e1 IN:o expr:e2	{: RESULT = new InExpression(e1, e2); :}
	| 	UNIQUE:o expr:e1	{: RESULT = new UniqueExpression(e1); :}
	| 	MIN:o expr:e1	{: RESULT = new MinExpression(e1); :}
	| 	MAX:o expr:e1	{: RESULT = new MaxExpression(e1); :}
	| 	SUM:o expr:e1	{: RESULT = new SumExpression(e1); :}
	| 	AVG:o expr:e1	{: RESULT = new AvgExpression(e1); :}
	| 	BAG:o expr:e1	{: RESULT = new BagExpression(e1); :}
	| 	BOOLEAN_LITERAL:o {: RESULT = new BooleanTerminal((Boolean)o); :}
	| 	IDENTIFIER_LITERAL:o {: RESULT = new NameTerminal((String)o); :}
	| 	DOUBLE_LITERAL:o {: RESULT = new DoubleTerminal((Double)o); :}
	| 	INTEGER_LITERAL:o {: RESULT = new IntegerTerminal((Integer)o); :}
	| 	expr:e1 DOT:o expr:e2	{: RESULT = new DotExpression(e1, e2); :}
	|	LEFT_ROUND_BRACKET:o expr:e1 RIGHT_ROUND_BRACKET {: RESULT = e1; :}
	;